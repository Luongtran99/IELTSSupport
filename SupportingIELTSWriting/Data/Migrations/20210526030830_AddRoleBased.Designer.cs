// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportingIELTSWriting.Data;

namespace SupportingIELTSWriting.Data.Migrations
{
    [DbContext(typeof(DictionaryDbContext))]
    [Migration("20210526030830_AddRoleBased")]
    partial class AddRoleBased
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Definition", b =>
                {
                    b.Property<string>("definitionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("definition");

                    b.Property<string>("example");

                    b.Property<string>("meaningId");

                    b.Property<string>("synonyms");

                    b.HasKey("definitionId")
                        .HasName("PRIMARY_KEY_DEFINITION");

                    b.HasIndex("meaningId");

                    b.ToTable("Definitions");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.Essay", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Text");

                    b.Property<string>("Topic");

                    b.Property<string>("historyId");

                    b.Property<bool>("isDeleted");

                    b.Property<DateTime>("theLastFixingTime");

                    b.Property<string>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Essays");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.History", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("essayId");

                    b.Property<bool>("isDeleted");

                    b.Property<string>("newEssay");

                    b.Property<string>("oldEssay");

                    b.Property<string>("userId");

                    b.HasKey("id");

                    b.HasIndex("essayId");

                    b.HasIndex("userId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("Age");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("isDeleted");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Meaning", b =>
                {
                    b.Property<string>("meaningId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("partOfSpeech");

                    b.Property<string>("wordId");

                    b.HasKey("meaningId")
                        .HasName("PRIMARY_KEY_MEANING");

                    b.HasIndex("wordId");

                    b.ToTable("Meanings");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Phonetic", b =>
                {
                    b.Property<string>("phoneticId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("audio");

                    b.Property<string>("text");

                    b.Property<string>("wordId");

                    b.HasKey("phoneticId")
                        .HasName("PRIMARY_KEY_PHONETIC");

                    b.HasIndex("wordId");

                    b.ToTable("Phonetics");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Word", b =>
                {
                    b.Property<string>("wordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("popularCount")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("word")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("wordId")
                        .HasName("PRIMARY_KEY_WORD");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.Roles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");


                    b.ToTable("Roles");

                    b.HasDiscriminator().HasValue("Roles");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleId1");

                    b.Property<string>("UserId1");

                    b.Property<int>("UserRoleID");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("UserRole");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SupportingIELTSWriting.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Definition", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Meaning", "Meaning")
                        .WithMany("definitions")
                        .HasForeignKey("meaningId");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.Essay", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Entities.User", "User")
                        .WithMany("Essays")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.History", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Entities.Essay", "Essay")
                        .WithMany("History")
                        .HasForeignKey("essayId");

                    b.HasOne("SupportingIELTSWriting.Models.Entities.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Meaning", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Word", "Word")
                        .WithMany("meanings")
                        .HasForeignKey("wordId");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Phonetic", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Word", "Word")
                        .WithMany("phonetics")
                        .HasForeignKey("wordId");
                });

            modelBuilder.Entity("SupportingIELTSWriting.Models.Entities.UserRole", b =>
                {
                    b.HasOne("SupportingIELTSWriting.Models.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.HasOne("SupportingIELTSWriting.Models.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
